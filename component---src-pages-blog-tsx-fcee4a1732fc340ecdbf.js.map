{"version":3,"sources":["webpack:///./src/components/postPreview.tsx","webpack:///./src/pages/blog.tsx","webpack:///./src/components/contactPrompt/loadingSpinner.tsx","webpack:///./src/components/contactPrompt/form.tsx","webpack:///./src/components/contactPrompt/index.tsx"],"names":["postPreviewStyle","css","PostPreviewDiv","styled","Link","props","bkg","tagStyle","Tag","p","NewestTag","titleStyle","Title","h2","NewestTitle","excerptStyle","Excerpt","NewestExcerpt","metaStyle","Meta","NewestMeta","PostPreview","post","to","fields","slug","frontmatter","cover","childImageSharp","fluid","src","tags","toUpperCase","title","brief","date","readingTime","NewestPostPreviewDiv","Preview","Img","PostBrief","div","NewestPostPreview","BlogText","Posts","pageQuery","BlogPage","posts","data","allMdx","edges","map","edge","node","sort","nodeA","nodeB","Date","getTime","description","length","key","id","slice","LoadingSpinner","width","height","viewBox","stroke","fill","fillRule","color","strokeWidth","cx","cy","r","attributeName","begin","dur","values","calcMode","keyTimes","keySplines","repeatCount","containerStyle","FormContainer","form","RegularContainer","Field","label","Input","input","TextArea","textarea","Button","button","FormMessage","Form","useState","formState","setFormState","theme","action","method","onSubmit","event","preventDefault","currentTarget","formData","FormData","xhr","XMLHttpRequest","console","log","open","onload","status","reset","send","required","name","type","rows","StyledDiv","Dialogue","ContactPrompt","children"],"mappings":"0OAKMA,EAAmBC,YAAH,mVAuBhBC,EAAiBC,YAAOC,KAAV,8EAAGD,CAAH,wEAChBH,GAGoB,SAACK,GAAD,OAAYA,EAAMC,IAAN,OAAmBD,EAAMC,IAAzB,eAI9BC,EAAWN,YAAH,kGAURO,EAAML,IAAOM,EAAV,mEAAGN,CAAH,QACLI,GAGEG,EAAYP,IAAOM,EAAV,yEAAGN,CAAH,mEACXI,GAOEI,EAAaV,YAAH,gJAYVW,EAAQT,IAAOU,GAAV,qEAAGV,CAAH,QACPQ,GAGEG,EAAcX,IAAOU,GAAV,2EAAGV,CAAH,qEACbQ,GAOEI,EAAed,YAAH,sFAQZe,EAAUb,IAAOM,EAAV,uEAAGN,CAAH,QACTY,GAGEE,EAAgBd,IAAOM,EAAV,6EAAGN,CAAH,sEACfY,GAOEG,EAAYjB,YAAH,uLAgBTkB,EAAOhB,IAAOM,EAAV,oEAAGN,CAAH,QACNe,GAGEE,EAAajB,IAAOM,EAAV,0EAAGN,CAAH,kFACZe,GAOSG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACzB,kBAACpB,EAAD,CAAgBqB,GAAID,EAAKE,OAAOC,KAAMnB,IAAKgB,EAAKI,YAAYC,MAAMC,gBAAgBC,MAAMC,KACtF,kBAACtB,EAAD,KAAMc,EAAKI,YAAYK,KAAK,GAAGC,eAC/B,kBAACpB,EAAD,KAAQU,EAAKI,YAAYO,OACzB,kBAACjB,EAAD,KAAUM,EAAKI,YAAYQ,OAC3B,kBAACf,EAAD,KACGG,EAAKI,YAAYS,KAAKH,cADzB,MAC2CV,EAAKI,YAAYU,YAD5D,eAMEC,EAAuBlC,YAAOC,KAAV,oFAAGD,CAAH,iNACtBH,GAGoB,SAACK,GAAD,OAAYA,EAAMC,IAAN,OAAmBD,EAAMC,IAAzB,eAe9BgC,EAAUnC,YAAOoC,KAAV,wEAAGpC,CAAH,mKAcPqC,EAAYrC,IAAOsC,IAAV,0EAAGtC,CAAH,6HASFuC,EAAoB,SAAC,GAAD,IAAGpB,EAAH,EAAGA,KAAH,OAC/B,kBAACe,EAAD,CAAsBd,GAAID,EAAKE,OAAOC,KAAMnB,IAAKgB,EAAKI,YAAYC,MAAMC,gBAAgBC,MAAMC,KAC5F,kBAACQ,EAAD,CAAST,MAAOP,EAAKI,YAAYC,MAAMC,gBAAgBC,QACvD,kBAACW,EAAD,KACE,kBAAC9B,EAAD,KAAYY,EAAKI,YAAYK,KAAK,GAAGC,eACrC,kBAAClB,EAAD,KAAcQ,EAAKI,YAAYO,OAC/B,kBAAChB,EAAD,KAAgBK,EAAKI,YAAYQ,OACjC,kBAACd,EAAD,KACGE,EAAKI,YAAYS,KAAKH,cADzB,MAC2CV,EAAKI,YAAYU,YAD5D,gBCvLAO,EAAWxC,IAAOsC,IAAV,qEAAGtC,CAAH,qiBAmDRyC,EAAQzC,IAAOsC,IAAV,kEAAGtC,CAAH,2SA6CE0C,GAFEC,UAxBE,SAAC,GAAa,IAGvBC,EAHuB,EAAXC,KACKC,OAAfC,MAGLC,KAAI,SAACC,GAAD,OAAUA,EAAKC,QACnBC,MAAK,SAACC,EAAOC,GAAR,OAAkB,IAAIC,KAAKD,EAAM9B,YAAYS,MAAMuB,UAAY,IAAID,KAAKF,EAAM7B,YAAYS,MAAMuB,aAExG,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKzB,MAAM,OAAO0B,YAAW,6EAC7B,kBAAChB,EAAD,KACE,8CACA,2GAEF,kBAACC,EAAD,KACoB,IAAjBG,EAAMa,OAAe,kBAAC,EAAD,CAAmBC,IAAKd,EAAM,GAAGe,GAAIxC,KAAMyB,EAAM,KAAS,qCAC/EA,EAAMgB,MAAM,GAAGZ,KAAI,SAAC7B,GAAD,OAClB,kBAAC,EAAD,CAAauC,IAAKvC,EAAKwC,GAAIxC,KAAMA,UASlB,e,iOC7CV0C,G,UArDQ,SAAC3D,GACtB,OACE,uCAAK4D,MAAO,GAAIC,OAAQ,GAAIC,QAAQ,YAAYC,OAAO,QAAW/D,GAChE,uBAAGgE,KAAK,OAAOC,SAAS,UAAUF,OAAQ/D,EAAMkE,MAAOC,YAAa,GAClE,4BAAQC,GAAI,GAAIC,GAAI,GAAIC,EAAG,GACzB,6BACEC,cAAc,IACdC,MAAM,KACNC,IAAI,OACJC,OAAO,QACPC,SAAS,SACTC,SAAS,OACTC,WAAW,uBACXC,YAAY,eAEd,6BACEP,cAAc,iBACdC,MAAM,KACNC,IAAI,OACJC,OAAO,OACPC,SAAS,SACTC,SAAS,OACTC,WAAW,sBACXC,YAAY,gBAGhB,4BAAQV,GAAI,GAAIC,GAAI,GAAIC,EAAG,GACzB,6BACEC,cAAc,IACdC,MAAM,QACNC,IAAI,OACJC,OAAO,QACPC,SAAS,SACTC,SAAS,OACTC,WAAW,uBACXC,YAAY,eAEd,6BACEP,cAAc,iBACdC,MAAM,QACNC,IAAI,OACJC,OAAO,OACPC,SAAS,SACTC,SAAS,OACTC,WAAW,sBACXC,YAAY,oBC5ClBC,EAAiBnF,YAAH,2QAmBdoF,EAAgBlF,IAAOmF,KAAV,0EAAGnF,CAAH,mFACfiF,GAIkB,SAAC/E,GAAD,OAAWA,EAAMkE,SAGjCgB,EAAmBpF,IAAOmF,KAAV,6EAAGnF,CAAH,kFAClBiF,GAIkB,SAAC/E,GAAD,OAAWA,EAAMkE,SAG5B,SAAClE,GAAD,MAA4B,kBAAhBA,EAAMkE,MAAN,iCAGjBiB,EAAQrF,IAAOsF,MAAV,kEAAGtF,CAAH,oIAWLuF,EAAQvF,IAAOwF,MAAV,kEAAGxF,CAAH,+JAYLyF,EAAWzF,IAAO0F,SAAV,qEAAG1F,CAAH,4LAcR2F,EAAS3F,IAAO4F,OAAV,mEAAG5F,CAAH,0TAgBY,SAACE,GAAD,OAAWA,EAAMkE,SAOnCyB,EAAc7F,IAAOM,EAAV,wEAAGN,CAAH,sGAiGF8F,EApFF,SAAC5F,GAAiB,MACK6F,mBAAsD,QAAjFC,EADsB,KACXC,EADW,KA4B7B,OAAQD,GACN,IAAK,OACH,OACE,kBAACd,EAAD,CACEd,MAAK,SAAWlE,EAAMgG,MAAjB,IACLC,OAAO,sCACPC,OAAO,OACPC,SA/BW,SAACC,GAClBA,EAAMC,iBACNN,EAAa,WAFiD,IAIvCd,EAASmB,EAAxBE,cAEJC,EAAW,IAAIC,SAASvB,GACxBwB,EAAM,IAAIC,eAEdC,QAAQC,IAAI,QAASL,GACrBE,EAAII,KAAK,OAAQ5B,EAAKgB,QAAQ,GAE9BQ,EAAIK,OAAS,WACQ,MAAfL,EAAIM,QACNhB,EAAa,aACbd,EAAK+B,SAELjB,EAAa,WAIjBU,EAAIQ,KAAKV,IAWH9C,GAAG,qBAEH,kBAAC0B,EAAD,YAEE,kBAACE,EAAD,CAAO6B,UAAQ,EAACC,KAAK,OAAOC,KAAK,UAEnC,kBAACjC,EAAD,aAEE,kBAACE,EAAD,CAAO6B,UAAQ,EAACC,KAAK,QAAQC,KAAK,WAEpC,kBAACjC,EAAD,eAEE,kBAACI,EAAD,CAAU2B,UAAQ,EAACC,KAAK,UAAUE,KAAM,KAE1C,kBAAC5B,EAAD,CAAQ2B,KAAK,SAASlD,MAAK,SAAWlE,EAAMgG,MAAjB,KAA3B,iBAKN,IAAK,UACH,OACE,kBAACd,EAAD,CAAkBhB,MAAK,SAAWlE,EAAMgG,MAAjB,KACrB,kBAAC,EAAD,CAAgB9B,MAAuB,WAAhBlE,EAAMgG,MAAN,iCAG7B,IAAK,YACH,OACE,kBAACd,EAAD,CAAkBhB,MAAK,SAAWlE,EAAMgG,MAAjB,KACrB,kBAACL,EAAD,eAEE,6BAFF,0BAON,IAAK,SACH,OACE,kBAACT,EAAD,CAAkBhB,MAAK,SAAWlE,EAAMgG,MAAjB,KACrB,kBAACL,EAAD,gCAEE,6BAFF,8BCzLJ2B,EAAYxH,IAAOsC,IAAV,2EAAGtC,CAAH,sUAsBTyH,EAAWzH,IAAOsC,IAAV,0EAAGtC,CAAH,uSAyCC0H,EAPO,SAACxH,GAAD,OACpB,kBAACsH,EAAD,KACE,kBAACC,EAAD,KAAWvH,EAAMyH,UACjB,kBAAC,EAAD,CAAMzB,MAAOhG,EAAMgG,U","file":"component---src-pages-blog-tsx-fcee4a1732fc340ecdbf.js","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst postPreviewStyle = css`\n  border: 2px solid var(--black);\n  padding: 5vw;\n  display: inline-block;\n  position: relative;\n\n  @media only screen and (min-width: 700px) {\n    padding: 33px 38px;\n\n    background-blend-mode: overlay;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-color: #ffffff;\n\n    transition: 0.1s ease-in;\n\n    &:hover {\n      background-color: #ffffff88;\n    }\n  }\n`\n\nconst PostPreviewDiv = styled(Link)<{ bkg?: string | null | undefined }>`\n  ${postPreviewStyle}\n\n  @media only screen and (min-width: 700px) {\n    background-image: ${(props) => (props.bkg ? `url(${props.bkg})` : `unset`)};\n  }\n`\n\nconst tagStyle = css`\n  margin: 0;\n\n  color: var(--blue);\n\n  font-family: 'Inter', sans-serif;\n  font-weight: bold;\n  font-size: 0.9rem;\n`\n\nconst Tag = styled.p`\n  ${tagStyle}\n`\n\nconst NewestTag = styled.p`\n  ${tagStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1rem;\n  }\n`\n\nconst titleStyle = css`\n  margin: 5px 0;\n\n  font-family: 'Inter', sans-serif;\n  font-weight: bold;\n  font-size: 1.5rem;\n\n  @media only screen and (min-width: 700px) {\n    font-size: 1.75rem;\n  }\n`\n\nconst Title = styled.h2`\n  ${titleStyle}\n`\n\nconst NewestTitle = styled.h2`\n  ${titleStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 2.5rem;\n  }\n`\n\nconst excerptStyle = css`\n  margin-bottom: 10vw;\n\n  @media only screen and (min-width: 700px) {\n    margin-bottom: 35px;\n  }\n`\n\nconst Excerpt = styled.p`\n  ${excerptStyle}\n`\n\nconst NewestExcerpt = styled.p`\n  ${excerptStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.25rem;\n  }\n`\n\nconst metaStyle = css`\n  margin: 0;\n  position: absolute;\n  bottom: 5vw;\n\n  color: var(--blue);\n\n  font-family: 'Inter', sans-serif;\n  font-weight: normal;\n  font-size: 0.8rem;\n\n  @media only screen and (min-width: 700px) {\n    bottom: 35px;\n  }\n`\n\nconst Meta = styled.p`\n  ${metaStyle}\n`\n\nconst NewestMeta = styled.p`\n  ${metaStyle}\n\n  @media only screen and (min-width: 1200px) {\n    position: unset;\n    font-size: 1rem;\n  }\n`\nexport const PostPreview = ({ post }) => (\n  <PostPreviewDiv to={post.fields.slug} bkg={post.frontmatter.cover.childImageSharp.fluid.src}>\n    <Tag>{post.frontmatter.tags[0].toUpperCase()}</Tag>\n    <Title>{post.frontmatter.title}</Title>\n    <Excerpt>{post.frontmatter.brief}</Excerpt>\n    <Meta>\n      {post.frontmatter.date.toUpperCase()} â€¢ {post.frontmatter.readingTime} MIN READ\n    </Meta>\n  </PostPreviewDiv>\n)\n\nconst NewestPostPreviewDiv = styled(Link)<{ bkg?: string | null | undefined }>`\n  ${postPreviewStyle}\n\n  @media only screen and (min-width: 700px) {\n    background-image: ${(props) => (props.bkg ? `url(${props.bkg})` : `unset`)};\n  }\n\n  @media only screen and (min-width: 1200px) {\n    grid-column: 1 / span 3;\n    background-image: none;\n\n    display: flex;\n\n    &:hover {\n      background-color: #5379ff22;\n    }\n  }\n`\n\nconst Preview = styled(Img)`\n  display: none;\n\n  @media only screen and (min-width: 1200px) {\n    display: flex;\n    flex-shrink: 0;\n    width: 62.5%;\n    height: 400px;\n    max-width: 750px;\n    max-height: unset;\n    overflow: hidden;\n  }\n`\n\nconst PostBrief = styled.div`\n  @media only screen and (min-width: 1200px) {\n    padding-left: 35px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n`\n\nexport const NewestPostPreview = ({ post }) => (\n  <NewestPostPreviewDiv to={post.fields.slug} bkg={post.frontmatter.cover.childImageSharp.fluid.src}>\n    <Preview fluid={post.frontmatter.cover.childImageSharp.fluid} />\n    <PostBrief>\n      <NewestTag>{post.frontmatter.tags[0].toUpperCase()}</NewestTag>\n      <NewestTitle>{post.frontmatter.title}</NewestTitle>\n      <NewestExcerpt>{post.frontmatter.brief}</NewestExcerpt>\n      <NewestMeta>\n        {post.frontmatter.date.toUpperCase()} â€¢ {post.frontmatter.readingTime} MIN READ\n      </NewestMeta>\n    </PostBrief>\n  </NewestPostPreviewDiv>\n)\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { Layout, SEO } from 'components'\nimport { PostPreview, NewestPostPreview } from 'components/postPreview'\n\nconst BlogText = styled.div`\n  background-color: var(--blue);\n  color: var(--white);\n\n  margin: 0 0 100px;\n  padding: 0 5vw;\n  width: calc(var(--mobile-width) - 10vw);\n\n  font-size: 1.2rem;\n  text-align: center;\n\n  h1 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 700;\n    font-size: 2rem;\n\n    span {\n      color: var(--white);\n      font-weight: 900;\n    }\n  }\n\n  @media only screen and (min-width: 700px) {\n    padding: 35px 40px;\n    width: calc(var(--mobile-width) - 80px);\n    max-width: 600px;\n\n    h1 {\n      margin: 0;\n      font-size: 2.25rem;\n    }\n\n    p {\n      margin: 20px 0 0 0;\n    }\n  }\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.5rem;\n    max-width: 800px;\n\n    h1 {\n      font-size: 3rem;\n    }\n\n    p {\n      margin: 35px 0 0 0;\n    }\n  }\n`\n\nconst Posts = styled.div`\n  width: var(--mobile-width);\n  margin-bottom: 50px;\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 5vw;\n\n  @media only screen and (min-width: 700px) {\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n    max-width: var(--desktop-width);\n  }\n`\n\nconst BlogPage = ({ data }) => {\n  const { edges } = data.allMdx\n\n  const posts = edges\n    .map((edge) => edge.node)\n    .sort((nodeA, nodeB) => new Date(nodeB.frontmatter.date).getTime() - new Date(nodeA.frontmatter.date).getTime())\n\n  return (\n    <Layout>\n      <SEO title='Blog' description={`My thoughts, lessons, and experiences immortalized for your consumption.`} />\n      <BlogText>\n        <h1>A simple blog.</h1>\n        <p>My thoughts, lessons, and experiences immortalized for your consumption. ðŸ“Ž</p>\n      </BlogText>\n      <Posts>\n        {posts.length !== 0 ? <NewestPostPreview key={posts[0].id} post={posts[0]} /> : <></>}\n        {posts.slice(1).map((post) => (\n          <PostPreview key={post.id} post={post} />\n        ))}\n      </Posts>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\nexport const pageQuery = graphql`\n  query blogIndex {\n    allMdx {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            brief\n            cover {\n              childImageSharp {\n                fluid(quality: 100) {\n                  base64\n                  aspectRatio\n                  src\n                  srcSet\n                  sizes\n                }\n              }\n            }\n            date(formatString: \"D MMM YYYY\")\n            readingTime\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n","// By Sam Herbert (@sherb), for everyone. More @ http://goo.gl/7AJzbL\n// Modified to support a color prop\n\nimport React from 'react'\n\nconst LoadingSpinner = (props: { color: string }) => {\n  return (\n    <svg width={44} height={44} viewBox='0 0 44 44' stroke='#fff' {...props}>\n      <g fill='none' fillRule='evenodd' stroke={props.color} strokeWidth={2}>\n        <circle cx={22} cy={22} r={1}>\n          <animate\n            attributeName='r'\n            begin='0s'\n            dur='1.8s'\n            values='1; 20'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.165, 0.84, 0.44, 1'\n            repeatCount='indefinite'\n          />\n          <animate\n            attributeName='stroke-opacity'\n            begin='0s'\n            dur='1.8s'\n            values='1; 0'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.3, 0.61, 0.355, 1'\n            repeatCount='indefinite'\n          />\n        </circle>\n        <circle cx={22} cy={22} r={1}>\n          <animate\n            attributeName='r'\n            begin='-0.9s'\n            dur='1.8s'\n            values='1; 20'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.165, 0.84, 0.44, 1'\n            repeatCount='indefinite'\n          />\n          <animate\n            attributeName='stroke-opacity'\n            begin='-0.9s'\n            dur='1.8s'\n            values='1; 0'\n            calcMode='spline'\n            keyTimes='0; 1'\n            keySplines='0.3, 0.61, 0.355, 1'\n            repeatCount='indefinite'\n          />\n        </circle>\n      </g>\n    </svg>\n  )\n}\n\nexport default LoadingSpinner\n","import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { ThemeColor } from 'src/types'\nimport LoadingSpinner from './loadingSpinner'\n\nconst containerStyle = css`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  padding: 5vw;\n  width: calc(var(--mobile-width) - 10vw);\n  min-height: 420px;\n\n  @media only screen and (min-width: 700px) {\n    padding: 35px 40px;\n    width: 300px;\n    min-height: 460px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    width: 355px;\n  }\n`\n\nconst FormContainer = styled.form<{ color: string }>`\n  ${containerStyle}\n  align-items: flex-start;\n  justify-content: space-between;\n\n  background-color: ${(props) => props.color};\n`\n\nconst RegularContainer = styled.form<{ color: string }>`\n  ${containerStyle}\n  align-items: center;\n  justify-content: center;\n\n  background-color: ${(props) => props.color};\n\n  /* color: var(--white); */\n  color: ${(props) => (props.color === 'var(--yellow)' ? `var(--black)` : `var(--white)`)};\n`\n\nconst Field = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 5px;\n  width: 100%;\n\n  font-family: 'Inter', sans-serif;\n  font-size: 1rem;\n  font-weight: 600;\n`\n\nconst Input = styled.input`\n  margin: 5px 0;\n  padding: 0.5rem;\n\n  border: 2px solid var(--black);\n  border-radius: 0;\n  background-color: #ffffff;\n\n  font-family: 'Open Sans', sans-serif;\n  font-size: 1.125rem;\n`\n\nconst TextArea = styled.textarea`\n  resize: none;\n  margin-top: 5px;\n  margin-bottom: -5px;\n  padding: 0.5rem;\n\n  border: 2px solid var(--black);\n  border-radius: 0;\n  background-color: #ffffff;\n\n  font-family: 'Inter', sans-serif;\n  font-size: 1.125rem;\n`\n\nconst Button = styled.button<{ color: string }>`\n  margin-top: 5vw;\n  padding: 0.75rem 1rem;\n\n  border: 2px solid var(--text);\n  background-color: var(--bkg);\n  color: var(--text);\n\n  font-family: 'Open Sans', sans-serif;\n  font-size: 1.125rem;\n  font-weight: 600;\n\n  transition: 0.1s ease-in;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${(props) => props.color};\n  }\n\n  @media only screen and (min-width: 700px) {\n    margin-top: 35px;\n  }\n`\nconst FormMessage = styled.p`\n  text-align: center;\n  font-size: 1.125rem;\n\n  @media only screen and (min-width: 700px) {\n    font-size: 1.4rem;\n  }\n`\n\ninterface Props {\n  theme: ThemeColor\n}\n\nconst Form = (props: Props) => {\n  const [formState, setFormState] = useState<'idle' | 'loading' | 'submitted' | 'failed'>('idle')\n\n  // See: https://usebasin.com/docs/features/ajax\n  const submitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    setFormState('loading')\n\n    const { currentTarget: form } = event\n\n    let formData = new FormData(form)\n    let xhr = new XMLHttpRequest()\n\n    console.log('data:', formData)\n    xhr.open('POST', form.action, true)\n\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        setFormState('submitted')\n        form.reset()\n      } else {\n        setFormState('failed')\n      }\n    }\n\n    xhr.send(formData)\n  }\n\n  switch (formState) {\n    case 'idle':\n      return (\n        <FormContainer\n          color={`var(--${props.theme})`}\n          action='https://usebasin.com/f/9d85adb927f2'\n          method='POST'\n          onSubmit={submitForm}\n          id='blog-contact-form'\n        >\n          <Field>\n            Name\n            <Input required name='name' type='text' />\n          </Field>\n          <Field>\n            Email\n            <Input required name='email' type='email' />\n          </Field>\n          <Field>\n            Message\n            <TextArea required name='message' rows={7}></TextArea>\n          </Field>\n          <Button type='submit' color={`var(--${props.theme})`}>\n            Send Message\n          </Button>\n        </FormContainer>\n      )\n    case 'loading':\n      return (\n        <RegularContainer color={`var(--${props.theme})`}>\n          <LoadingSpinner color={props.theme === 'yellow' ? `var(--black)` : `var(--white)`} />\n        </RegularContainer>\n      )\n    case 'submitted':\n      return (\n        <RegularContainer color={`var(--${props.theme})`}>\n          <FormMessage>\n            Thanks!\n            <br />\n            We'll be in touch. ðŸ™‚\n          </FormMessage>\n        </RegularContainer>\n      )\n    case 'failed':\n      return (\n        <RegularContainer color={`var(--${props.theme})`}>\n          <FormMessage>\n            Something went wrong. ðŸ˜¶\n            <br />\n            Please try again later.\n          </FormMessage>\n        </RegularContainer>\n      )\n  }\n}\n\nexport default Form\n","import React from 'react'\nimport styled from 'styled-components'\nimport Form from './form'\n\nimport { ThemeColor } from 'src/types'\n\nconst StyledDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  width: var(--mobile-width);\n  margin-top: 75px;\n  margin-bottom: 50px;\n\n  @media only screen and (min-width: 700px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n\n    margin-top: 150px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    max-width: var(--desktop-width);\n  }\n`\n\nconst Dialogue = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n\n  margin-bottom: 50px;\n\n  h1 {\n    margin: 0;\n    font-family: 'Inter', sans-serif;\n  }\n\n  p {\n    margin: 20px 0;\n\n    font-family: 'Open Sans', sans-serif;\n    font-size: 1.25rem;\n  }\n\n  @media only screen and (min-width: 700px) {\n    margin-right: 5vw;\n\n    p {\n      margin: 10px 0 30px;\n      font-size: 1.5rem;\n    }\n  }\n`\n\ninterface Props {\n  theme: ThemeColor\n  children: React.ReactNode\n}\n\nconst ContactPrompt = (props: Props) => (\n  <StyledDiv>\n    <Dialogue>{props.children}</Dialogue>\n    <Form theme={props.theme} />\n  </StyledDiv>\n)\n\nexport default ContactPrompt\n"],"sourceRoot":""}