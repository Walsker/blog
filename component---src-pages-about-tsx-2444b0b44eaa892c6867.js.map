{"version":3,"sources":["webpack:///./src/components/moodBoard.tsx","webpack:///./src/hooks/useInterval.ts","webpack:///./src/pages/about.tsx"],"names":["StyledAnchor","styled","a","StyledIcon","FontAwesomeIcon","ExternalLink","props","style","target","rel","href","link","children","icon","faExternalLinkAlt","size","Container","div","Prompt","p","Tiles","Tile","TileToG","TileKota","TileDefund","TileMeasured","TileSong","TilePrestige","TileMeme","SpotifyDiv","SpotifyFrame","src","width","height","frameBorder","allow","MoodBoard","images","fluid","anime","childImageSharp","display","textAlign","marginTop","cake","useInterval","callback","interval","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","StyledLink","Link","ProfileDiv","IntroText","UpdateDiv","ProfileImage","Img","AcImage","Dialogue","section","Adjective","word","adjectives","useState","index","select","length","query","AboutPage","data","title","description","profile","alt","to","animalCrossing","theme","color","label"],"mappings":"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","file":"component---src-pages-about-tsx-2444b0b44eaa892c6867.js","sourcesContent":["import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'\n\n// import { LazyImage } from 'components'\n// import cakeUrl from './cake.jpg'\n// import cakeThumb from './cake-thumb.jpg'\n// import animeUrl from './greatest-anime-betrayal.jpg'\n// import animeThumb from './greatest-anime-betrayal-thumb.jpg'\n\nconst StyledAnchor = styled.a`\n  text-decoration: underline;\n  font-style: italic;\n`\n\nconst StyledIcon = styled(FontAwesomeIcon)`\n  margin-left: 0.25rem;\n`\n\ninterface LinkProps {\n  children: React.ReactNode\n  link: string\n  style?: any\n}\n\nconst ExternalLink = (props: LinkProps) => (\n  <StyledAnchor style={props.style} target='_blank' rel='noopener noreferrer external' href={props.link}>\n    {props.children}\n    <StyledIcon icon={faExternalLinkAlt} size='1x' />\n  </StyledAnchor>\n)\n\nconst Container = styled.div`\n  width: var(--mobile-width);\n\n  margin-bottom: 50px;\n\n  @media only screen and (min-width: 1200px) {\n    margin-bottom: 100px;\n    max-width: var(--desktop-width);\n  }\n`\n\nconst Prompt = styled.p`\n  @media only screen and (min-width: 700px) {\n    max-width: 600px;\n    font-size: 1.25rem;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.5rem;\n  }\n`\n\nconst Tiles = styled.div`\n  overflow: visible;\n  column-count: 1;\n\n  @media only screen and (min-width: 700px) {\n    column-count: 2;\n    column-gap: 20px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 20px;\n  }\n`\n\nconst Tile = styled.div`\n  padding: 5vw;\n  margin-bottom: 5vw;\n\n  border: 2px solid var(--black);\n\n  h3 {\n    margin: 0;\n    font-family: 'Inter', sans-serif;\n    font-weight: bold;\n    font-size: 1.5rem;\n    font-style: italic;\n  }\n\n  h3 strong {\n    font-weight: bold;\n    background-color: var(--green);\n  }\n\n  p {\n    margin: 33px 0 0 0;\n  }\n\n  p strong {\n    font-weight: normal;\n    font-style: italic;\n  }\n\n  @media only screen and (min-width: 700px) {\n    display: inline-block;\n    margin-bottom: 20px;\n    padding: 33px 38px;\n    width: calc(45vw - 90px); /** idk why this works, it should be 45vw - 20px - 100px */\n  }\n\n  @media only screen and (min-width: 1200px) {\n    margin-bottom: 0;\n    width: unset;\n\n    display: flex;\n    flex-direction: column;\n  }\n`\n\nconst TileToG = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 1 / 2;\n    grid-row: 1 / 3;\n  }\n`\n\nconst TileKota = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 2 / 4;\n    grid-row: 1 / 2;\n  }\n`\n\nconst TileDefund = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 1 / 2;\n    grid-row: 3 / 4;\n  }\n`\n\nconst TileMeasured = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 2 / 3;\n    grid-row: 2 / 4;\n  }\n`\n\nconst TileSong = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 3 / 4;\n    grid-row: 2 / 7;\n  }\n`\n\nconst TilePrestige = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 1 / 2;\n    grid-row: 4 / 9;\n  }\n`\n\nconst TileMeme = styled(Tile)`\n  @media only screen and (min-width: 1200px) {\n    grid-column: 2 / 3;\n    grid-row: 4 / 8;\n  }\n`\n\n// const AnimeImage = styled(LazyImage)`\n//   width: 100%;\n//   padding-top: 56.25%;\n// `\n\n// const CakeImage = styled(LazyImage)`\n//   width: 100%;\n//   padding-top: 77.8%;\n// `\n\nconst SpotifyDiv = styled.div`\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  padding-top: 126.6%;\n\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n  }\n`\n\nconst SpotifyFrame = () => (\n  <SpotifyDiv>\n    <iframe\n      src='https://open.spotify.com/embed/track/1Gv8NYJeqQNXXrYQ1c1r4e'\n      width='100%'\n      height='100%'\n      frameBorder={0}\n      allow='encrypted-media'\n    />\n  </SpotifyDiv>\n)\n\nconst MoodBoard = () => {\n  const images = useStaticQuery(graphql`\n    query {\n      anime: file(relativePath: { eq: \"greatest-anime-betrayal.png\" }) {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      cake: file(relativePath: { eq: \"cake.jpg\" }) {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Container>\n      <Prompt>If I were to summarize what’s been on my mind, it would look something like...</Prompt>\n      <Tiles>\n        <TileToG>\n          {/* <AnimeImage alt='greatest-anime-betrayal.jpg' src={animeUrl} thumbnail={animeThumb} /> */}\n          <Img fluid={images.anime.childImageSharp.fluid} />\n          <p>\n            This scene from <strong>Tower of God</strong> is the greatest anime betrayal of all time. Prove me wrong.\n          </p>\n        </TileToG>\n        <TileKota>\n          <h3>\n            “If I say I love you then that's where it ends\n            <br />\n            You don't gotta have a title just to be my friend\n            <br />\n            You can have it all, I won't ask you for a damn thing\n            <br />\n            Welcome to my table, <strong>it don't matter what you can't bring</strong>”\n          </h3>\n          <ExternalLink\n            link='https://open.spotify.com/track/5av7NCtwaAsID0TJylcSD4?si=iPQBu256RkmQaO-tUmSyMQ'\n            style={{ display: 'inline-block', textAlign: 'right', marginTop: '10px' }}\n          >\n            Solar Return by Kota the Friend\n          </ExternalLink>\n        </TileKota>\n        <TileDefund>\n          <h3>Defund the Police</h3>\n          <p>\n            Check out these flyers about{' '}\n            <ExternalLink link='https://drive.google.com/drive/folders/1HUpCPvOwUJElxtUP4mCysAY9GyZrSmUk?usp=sharing'>\n              alternatives to policing\n            </ExternalLink>{' '}\n            to see what this might look like.\n          </p>\n        </TileDefund>\n        <TilePrestige>\n          <h3>\n            “But at campus career centers, students are struggling with the dual, and sometimes dueling, desires for{' '}\n            <strong>prestige and purpose</strong>.\"\n          </h3>\n          <p>\n            <ExternalLink link='https://nyti.ms/2NerVLW'>‘Techlash’ Hits College Campuses</ExternalLink> is a short\n            article that describes an attitude developing on campuses that I’ve sympathized with a lot. If you’re a\n            student like me who will soon have to depart into the “real world”, I highly suggest giving it a quick read.\n          </p>\n        </TilePrestige>\n        <TileMeasured>\n          <h3>\n            <strong>“What isn’t measured, isn’t managed.”</strong>\n          </h3>\n          <p>\n            This quote has been said by many and has shown itself in different forms, however the person I heard it from\n            was Bukola on her YouTube channel,{' '}\n            <ExternalLink link='https://www.youtube.com/channel/UC-bFgwL_kFKLZA60AiB-CCQ'>The Come Up</ExternalLink>.\n            She talks about some stuff that I personally find helpful on my professional journey.\n          </p>\n        </TileMeasured>\n        <TileSong>\n          <SpotifyFrame />\n          <p>\n            The song I currently have on repeat. I’m constantly searching for new music, so if there’s something you\n            think I’d like send it my way.\n          </p>\n          <p>\n            <ExternalLink link='https://open.spotify.com/user/pl1vqeducjzg0mwrciopnvlmo?si=zLempIPaTkayR4MkjojB2g'>\n              Check out my Spotify\n            </ExternalLink>\n          </p>\n        </TileSong>\n        <TileMeme>\n          {/* <CakeImage alt='everything-is-cake.jpg' src={cakeUrl} thumbnail={cakeThumb} /> */}\n          <Img fluid={images.cake.childImageSharp.fluid} />\n\n          <p>\n            <ExternalLink link='https://twitter.com/tasty/status/1280966608933003264'>context</ExternalLink>\n          </p>\n        </TileMeme>\n      </Tiles>\n    </Container>\n  )\n}\n\nexport default MoodBoard\n","/*\n * useInterval: A hook that makes setInterval declarative\n * source: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * Converted to TypeScript by Wal Wal\n */\n\nimport { useEffect, useRef } from 'react'\n\nconst useInterval = (callback: () => void, interval: number) => {\n  const savedCallback = useRef<any>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (interval !== null) {\n      let id = setInterval(tick, interval)\n      return () => clearInterval(id)\n    }\n  }, [interval])\n}\n\nexport default useInterval\n","import React, { useState } from 'react'\nimport { Link, graphql, PageProps } from 'gatsby'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nimport { Button, ContactPrompt, Layout, SEO } from 'components'\nimport MoodBoard from 'components/moodBoard'\nimport { useInterval } from 'hooks'\n\nconst StyledLink = styled(Link)`\n  text-decoration: underline;\n`\n\nconst ProfileDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: var(--mobile-width);\n  margin-bottom: 50px;\n\n  @media only screen and (min-width: 700px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    max-width: var(--desktop-width);\n  }\n`\n\nconst IntroText = styled.div`\n  margin: 20px 0;\n  background-color: var(--green);\n\n  font-size: 1.2rem;\n  text-align: center;\n\n  h1 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 700;\n    font-size: 2rem;\n\n    span {\n      color: var(--white);\n      font-weight: 900;\n    }\n  }\n\n  @media only screen and (min-width: 700px) {\n    padding: 35px 40px;\n    text-align: right;\n\n    h1 {\n      margin: 0;\n      font-size: 2.25rem;\n    }\n\n    p {\n      margin: 20px 0 0 0;\n    }\n  }\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.5rem;\n\n    h1 {\n      font-size: 3rem;\n    }\n\n    p {\n      margin: 35px 0 0 0;\n    }\n  }\n`\n\nconst UpdateDiv = styled.div`\n  display: flex;\n  flex-direction: column-reverse;\n  align-items: center;\n\n  width: var(--mobile-width);\n\n  text-align: left;\n  font-size: 1rem;\n\n  margin-bottom: 50px;\n\n  h2 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 700;\n    font-size: 1.5rem;\n  }\n\n  @media only screen and (min-width: 700px) {\n    flex-direction: row;\n    justify-content: space-between;\n    text-align: left;\n    font-size: 1.2rem;\n\n    border: 2px solid var(--black);\n    padding: 33px 38px;\n    width: calc(var(--mobile-width) - 80px);\n\n    h2 {\n      font-size: 1.75rem;\n    }\n  }\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.5rem;\n    max-width: calc(var(--desktop-width) - 80px);\n\n    h2 {\n      font-size: 2rem;\n    }\n  }\n`\n\nconst ProfileImage = styled(Img)`\n  flex-shrink: 0;\n\n  width: 80vw;\n  height: 80vw;\n\n  @media only screen and (min-width: 700px) {\n    width: 200px;\n    height: 272px;\n    margin-right: 30px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    width: 355px;\n    height: 482.4px;\n    margin-right: 50px;\n  }\n`\n\nconst AcImage = styled(Img)`\n  flex-shrink: 0;\n\n  width: 80vw;\n  height: 80vw;\n\n  @media only screen and (min-width: 700px) {\n    width: 200px;\n    height: 200px;\n    margin-left: 30px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    width: 320px;\n    height: 320px;\n    margin-right: 50px;\n  }\n`\n\nconst Dialogue = styled.section`\n  width: var(--mobile-width);\n\n  h2 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 700;\n    font-size: 1.5rem;\n  }\n\n  @media only screen and (min-width: 700px) {\n    h2 {\n      font-size: 1.2rem;\n    }\n  }\n\n  @media only screen and (min-width: 1200px) {\n    max-width: var(--desktop-width);\n  }\n`\n\nconst Adjective = () => {\n  const adjectives = [\n    'Wal Wal',\n    'Wal Wal',\n    'Wal Wal',\n    'Wal Wal',\n    'passionate',\n    'smart',\n    'a bass vocalist',\n    'creative',\n    'hard-working',\n    'a Leo',\n    'friendly',\n    'motivated'\n  ]\n\n  const componentify = (word: string) => <span>{word}</span>\n  const [index, select] = useState(0)\n  useInterval(() => select((index + 1) % adjectives.length), 500)\n\n  return componentify(adjectives[index])\n}\n\nconst AboutPage = ({ data }: PageProps) => (\n  <Layout>\n    <SEO\n      title='About'\n      description={`Glad you would like to learn a little more about me! 😊 Before you ask - Yes, my first name is actually the\n            same as my last.`}\n    />\n    <ProfileDiv>\n      {/* <ProfileImage alt='Profile picture - smirk' src={smirkProfileUrl} thumbnail={smirkProfileThumb} /> */}\n      <ProfileImage fluid={data.profile.childImageSharp.fluid} alt='Profile picture' />\n      <IntroText>\n        <h1>\n          I am <Adjective />.\n        </h1>\n        <p>\n          Glad you would like to learn a little more about me! 😊 Before you ask - Yes, my first name is actually the\n          same as my last.\n        </p>\n      </IntroText>\n    </ProfileDiv>\n    <UpdateDiv>\n      <section>\n        <h2>🎯 What am I up to right now?</h2>\n        <ul>\n          <li>\n            I’ve started a <StyledLink to='/blog'>blog</StyledLink>!\n          </li>\n          <li>Making some cool stuff as Director of Development at cuHacking</li>\n          <li>Putting too many hours into Animal Crossing</li>\n          <li>Recently completed a full year at Ribbon Communications as an intern</li>\n        </ul>\n      </section>\n      {/* <AcImage alt='Animal Crossing' src={acQuestionUrl} thumbnail={acQuestionThumb} /> */}\n      <AcImage fluid={data.animalCrossing.childImageSharp.fluid} alt='Animal Crossing Character' />\n    </UpdateDiv>\n    <MoodBoard />\n    <Dialogue>\n      <h3>⌛ About my past </h3>\n      <p>\n        I'm a <strong>South Sudanese</strong> Canadian raised in Ottawa, and currently attending{' '}\n        <strong>Carleton University</strong> for <strong>Computer Science</strong> along with minor studies in\n        Entrepreneurship. In high school I was the kid who dipped their fingers into every club - I was the lead in\n        multiple school musicals, I was first clarinet in the concert band, and I handled the lights and sound for\n        assemblies and performances as part of the \"tech crew\". I was even on the student council once. 😅 Now at\n        Carleton I've (mostly) focused my many passions into <strong>programming</strong>.\n      </p>\n    </Dialogue>\n    <Dialogue>\n      <h3>Hold on, how did programming enter the picture? 🤔</h3>\n      <p>\n        I was fortunate enough that my high school offered Computer Science courses, of which I took three. They were\n        all game development focused, but they still opened that door for me which I didn't know existed. It wasn't\n        until my first hackathon (Random Hacks of Kindness, great hackathon by the way) in first year of university that\n        I started branching out past game development.{' '}\n        <strong>\n          This is where I began to realize the limitless potential one carries with the ability to code and collaborate.\n        </strong>{' '}\n        Fast forward to today, now I do a little bit of everything when it comes to the tech industry - frontend,\n        backend, dev-ops-y stuff and even designing (funny how history repeats itself 🙈). Currently, I'm finding myself\n        in a more \"Project Manager\" or, dare I say “CTO” type position with my current role at cuHacking.\n      </p>\n    </Dialogue>\n    <Dialogue>\n      <p>\n        Today, I'm in a constant search for new friends and collaborators. I've also discovered that my passion has{' '}\n        <strong>\n          more to do with the new and amazing things you get to make as a developer, rather than coding itself\n        </strong>\n        . Pair that and the love for collaboration and you get a character who is eager to make apps that are larger\n        than life itself...who then has to scale them back down to something reasonable. 🤷🏿‍♂️\n      </p>\n    </Dialogue>\n    <Dialogue>\n      <p>\n        Want to get in touch? The inbox is open so <strong>contact me below</strong>.\n      </p>\n    </Dialogue>\n    <ContactPrompt theme='green'>\n      <h1>Feeling inspired? Let’s talk about it.</h1>\n      <p>I’m always looking to act on new ideas, start new projects, or even just spill tea.</p>\n      <Button color='var(--green)' label='My Resume' link='/resume' />\n    </ContactPrompt>\n  </Layout>\n)\n\nexport default AboutPage\n\nexport const query = graphql`\n  query {\n    profile: file(relativePath: { eq: \"smirk-profile.jpg\" }) {\n      childImageSharp {\n        fluid(quality: 100) {\n          base64\n          aspectRatio\n          src\n          srcSet\n          sizes\n        }\n      }\n    }\n    animalCrossing: file(relativePath: { eq: \"ac-question.jpg\" }) {\n      childImageSharp {\n        fluid {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}