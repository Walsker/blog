{"version":3,"sources":["webpack:///./src/components/postPreview.tsx","webpack:///./src/pages/blog.tsx"],"names":["postPreviewStyle","css","PostPreviewDiv","styled","Link","props","bkg","tagStyle","Tag","p","NewestTag","titleStyle","Title","h2","NewestTitle","excerptStyle","Excerpt","NewestExcerpt","metaStyle","Meta","NewestMeta","PostPreview","post","to","fields","slug","frontmatter","cover","childImageSharp","fluid","src","tags","toUpperCase","title","brief","date","readingTime","NewestPostPreviewDiv","Preview","div","image","PostBrief","NewestPostPreview","BlogText","Posts","pageQuery","BlogPage","posts","data","allMdx","edges","map","edge","node","sort","nodeA","nodeB","Date","getTime","description","length","key","id","slice"],"mappings":"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","file":"component---src-pages-blog-tsx-c11dc09f19d7089dce1f.js","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nconst postPreviewStyle = css`\n  border: 2px solid var(--black);\n  padding: 5vw;\n  display: inline-block;\n  position: relative;\n\n  @media only screen and (min-width: 700px) {\n    padding: 33px 38px;\n\n    background-blend-mode: overlay;\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n    background-color: #ffffff;\n\n    transition: 0.1s ease-in;\n\n    &:hover {\n      background-color: #ffffff88;\n    }\n  }\n`\n\nconst PostPreviewDiv = styled(Link)<{ bkg?: string | null | undefined }>`\n  ${postPreviewStyle}\n\n  @media only screen and (min-width: 700px) {\n    background-image: ${(props) => (props.bkg ? `url(${props.bkg})` : `unset`)};\n  }\n`\n\nconst tagStyle = css`\n  margin: 0;\n\n  color: var(--blue);\n\n  font-family: 'Inter', sans-serif;\n  font-weight: bold;\n  font-size: 0.9rem;\n`\n\nconst Tag = styled.p`\n  ${tagStyle}\n`\n\nconst NewestTag = styled.p`\n  ${tagStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1rem;\n  }\n`\n\nconst titleStyle = css`\n  margin: 5px 0;\n\n  font-family: 'Inter', sans-serif;\n  font-weight: bold;\n  font-size: 1.5rem;\n\n  @media only screen and (min-width: 700px) {\n    font-size: 1.75rem;\n  }\n`\n\nconst Title = styled.h2`\n  ${titleStyle}\n`\n\nconst NewestTitle = styled.h2`\n  ${titleStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 2.5rem;\n  }\n`\n\nconst excerptStyle = css`\n  margin-bottom: 10vw;\n\n  @media only screen and (min-width: 700px) {\n    margin-bottom: 35px;\n  }\n`\n\nconst Excerpt = styled.p`\n  ${excerptStyle}\n`\n\nconst NewestExcerpt = styled.p`\n  ${excerptStyle}\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.25rem;\n  }\n`\n\nconst metaStyle = css`\n  margin: 0;\n  position: absolute;\n  bottom: 5vw;\n\n  color: var(--blue);\n\n  font-family: 'Inter', sans-serif;\n  font-weight: normal;\n  font-size: 0.8rem;\n\n  @media only screen and (min-width: 700px) {\n    bottom: 35px;\n  }\n`\n\nconst Meta = styled.p`\n  ${metaStyle}\n`\n\nconst NewestMeta = styled.p`\n  ${metaStyle}\n\n  @media only screen and (min-width: 1200px) {\n    position: unset;\n    font-size: 1rem;\n  }\n`\nexport const PostPreview = ({ post }) => {\n  return (\n    <PostPreviewDiv to={post.fields.slug} bkg={post.frontmatter.cover.childImageSharp.fluid.src}>\n      <Tag>{post.frontmatter.tags[0].toUpperCase()}</Tag>\n      <Title>{post.frontmatter.title}</Title>\n      <Excerpt>{post.frontmatter.brief}</Excerpt>\n      <Meta>\n        {post.frontmatter.date.toUpperCase()} â€¢ {post.frontmatter.readingTime} MIN READ\n      </Meta>\n    </PostPreviewDiv>\n  )\n}\n\nconst NewestPostPreviewDiv = styled(Link)<{ bkg?: string | null | undefined }>`\n  ${postPreviewStyle}\n\n  @media only screen and (min-width: 700px) {\n    background-image: ${(props) => (props.bkg ? `url(${props.bkg})` : `unset`)};\n  }\n\n  @media only screen and (min-width: 1200px) {\n    grid-column: 1 / span 3;\n    background-image: none;\n\n    display: flex;\n\n    &:hover {\n      background-color: #5379ff22;\n    }\n  }\n`\n\nconst Preview = styled.div<{ image?: string | undefined | null }>`\n  display: none;\n\n  @media only screen and (min-width: 1200px) {\n    display: flex;\n    flex-shrink: 0;\n    width: 62.5%;\n    height: 400px;\n    max-width: 750px;\n    max-height: unset;\n    background-image: ${(props) => (props.image ? `url(${props.image})` : `unset`)};\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-position: center;\n\n    overflow: hidden;\n  }\n`\n\nconst PostBrief = styled.div`\n  @media only screen and (min-width: 1200px) {\n    padding-left: 35px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n`\n\nexport const NewestPostPreview = ({ post }) => {\n  return (\n    <NewestPostPreviewDiv to={post.fields.slug} bkg={post.frontmatter.cover.childImageSharp.fluid.src}>\n      <Preview image={post.frontmatter.cover.childImageSharp.fluid.src} />\n      <PostBrief>\n        <NewestTag>{post.frontmatter.tags[0].toUpperCase()}</NewestTag>\n        <NewestTitle>{post.frontmatter.title}</NewestTitle>\n        <NewestExcerpt>{post.frontmatter.brief}</NewestExcerpt>\n        <NewestMeta>\n          {post.frontmatter.date.toUpperCase()} â€¢ {post.frontmatter.readingTime} MIN READ\n        </NewestMeta>\n      </PostBrief>\n    </NewestPostPreviewDiv>\n  )\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { Layout, SEO } from 'components'\nimport { PostPreview, NewestPostPreview } from 'components/postPreview'\n\nconst BlogText = styled.div`\n  background-color: var(--blue);\n  color: var(--white);\n\n  margin: 0 0 100px;\n  padding: 0 5vw;\n  width: calc(var(--mobile-width) - 10vw);\n\n  font-size: 1.2rem;\n  text-align: center;\n\n  h1 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 700;\n    font-size: 2rem;\n\n    span {\n      color: var(--white);\n      font-weight: 900;\n    }\n  }\n\n  @media only screen and (min-width: 700px) {\n    padding: 35px 40px;\n    width: calc(var(--mobile-width) - 80px);\n    max-width: 600px;\n\n    h1 {\n      margin: 0;\n      font-size: 2.25rem;\n    }\n\n    p {\n      margin: 20px 0 0 0;\n    }\n  }\n\n  @media only screen and (min-width: 1200px) {\n    font-size: 1.5rem;\n    max-width: 800px;\n\n    h1 {\n      font-size: 3rem;\n    }\n\n    p {\n      margin: 35px 0 0 0;\n    }\n  }\n`\n\nconst Posts = styled.div`\n  width: var(--mobile-width);\n  margin-bottom: 50px;\n\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 5vw;\n\n  @media only screen and (min-width: 700px) {\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 20px;\n  }\n\n  @media only screen and (min-width: 1200px) {\n    grid-template-columns: repeat(3, 1fr);\n    max-width: var(--desktop-width);\n  }\n`\n\nconst BlogPage = ({ data }) => {\n  const { edges } = data.allMdx\n\n  const posts = edges\n    .map((edge) => edge.node)\n    .sort((nodeA, nodeB) => new Date(nodeB.frontmatter.date).getTime() - new Date(nodeA.frontmatter.date).getTime())\n\n  return (\n    <Layout>\n      <SEO title='Blog' description={`My thoughts, lessons, and experiences immortalized for your consumption.`} />\n      <BlogText>\n        <h1>A simple blog.</h1>\n        <p>My thoughts, lessons, and experiences immortalized for your consumption. ðŸ“Ž</p>\n      </BlogText>\n      <Posts>\n        {posts.length !== 0 ? <NewestPostPreview key={posts[0].id} post={posts[0]} /> : <></>}\n        {posts.slice(1).map((post) => (\n          <PostPreview key={post.id} post={post} />\n        ))}\n      </Posts>\n    </Layout>\n  )\n}\n\nexport default BlogPage\n\nexport const pageQuery = graphql`\n  query blogIndex {\n    allMdx {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            brief\n            cover {\n              childImageSharp {\n                fluid {\n                  base64\n                  aspectRatio\n                  src\n                  srcSet\n                  sizes\n                }\n              }\n            }\n            date(formatString: \"D MMM YYYY\")\n            readingTime\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}